// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  password  String
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Client {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  nameFantasy       String
  phone             String
  email             String
  cnpj              String
  responsible       String
  stateRegistration String
  observation       String
  address           Address?
  orders            Order[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model Seller {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  observation String
  phone       String
  email       String         @unique
  cnpj        String
  address     AddressSeller?
  orders      Order[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
}

model AddressSeller {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  district  String
  number    String
  city      String
  cep       String
  state     String
  country   String
  seller    Seller    @relation(fields: [sellerId], references: [id])
  sellerId  String    @unique @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Address {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  district  String
  number    String
  city      String
  cep       String
  state     String
  country   String
  client    Client    @relation(fields: [clientId], references: [id])
  clientId  String    @unique @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  code            String           @unique
  observation     String
  status          String
  deliveryAddress DeliveryAddress?
  client          Client           @relation(fields: [clientId], references: [id])
  clientId        String           @db.ObjectId
  seller          Seller           @relation(fields: [sellerId], references: [id])
  sellerId        String           @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  total           Float?
  productOrder    ProductOrder[]
}

model Product {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  stock        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  ProductOrder ProductOrder?
}

model ProductOrder {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  quantidity Int
  value      Float
  product    Product   @relation(fields: [productId], references: [id])
  productId  String    @unique @db.ObjectId
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String    @unique @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model DeliveryAddress {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  district  String
  number    String
  city      String
  cep       String
  state     String
  country   String
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String    @unique @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
